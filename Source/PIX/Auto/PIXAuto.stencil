
import Live

{% for parentType in types.implementing.PIXAutoParent %}
{% for inheritedType in parentType.inheritedTypes %}
{% if inheritedType == "PIXAutoParent" %}

// MARK: - {{ parentType.name }}

public enum Auto{{ parentType.name }}: String, Codable, CaseIterable {

	{% for type in types.implementing.PIXAuto %}
	{% for subType in type.inheritedTypes %}
	{% if subType == parentType.name %}
	case {{ type.name|lowercase }}
	{% endif %}
	{% endfor %}
	{% endfor %}

	public var name: String {
		switch self {
		{% for type in types.implementing.PIXAuto %}
		{% for subType in type.inheritedTypes %}
		{% if subType == parentType.name %}
		case .{{ type.name|lowercase }}: return "{{ type.name }}"
		{% endif %}
		{% endfor %}
		{% endfor %}
		}
	}

	public var pixType: {{ parentType.name }}.Type {
		switch self {
		{% for type in types.implementing.PIXAuto %}
		{% for subType in type.inheritedTypes %}
		{% if subType == parentType.name %}
		case .{{ type.name|lowercase }}: return {{ type.name }}.self
		{% endif %}
		{% endfor %}
		{% endfor %}
		}
	}

	{% for liveType in types.implementing.LiveValue %}
	public func auto{{ liveType.name }}s(for pix: {{ parentType.name }}) -> [Auto{{ liveType.name }}Property] {
		switch self {
		{% for type in types.implementing.PIXAuto %}
		{% for subType in type.inheritedTypes %}
		{% if subType == parentType.name %}
		case .{{ type.name|lowercase }}:
			return [
				{% for var in type.storedVariables %}
				{% if var.typeName.name == liveType.name %}
				Auto{{ liveType.name }}Property(name: "{{ var.name }}", getCallback: {
					return (pix as! {{ type.name }}).{{ var.name }}
				}, setCallback: { value in
					(pix as! {{ type.name }}).{{ var.name }} = value
				}),
				{% endif %}
				{% endfor %}
                {% for var in parentType.storedVariables %}
                {% if var.typeName.name == liveType.name %}
                Auto{{ liveType.name }}Property(name: "{{ var.name }}", getCallback: {
                    return (pix as! {{ type.name }}).{{ var.name }}
                }, setCallback: { value in
                    (pix as! {{ type.name }}).{{ var.name }} = value
                }),
                {% endif %}
                {% endfor %}
			]
		{% endif %}
		{% endfor %}
		{% endfor %}
		}	
	}
	{% endfor %}

	public func autoEnums(for pix: {{ parentType.name }}) -> [AutoEnumProperty] {
		switch self {
		{% for type in types.implementing.PIXAuto %}
		{% for subType in type.inheritedTypes %}
		{% if subType == parentType.name %}
		case .{{ type.name|lowercase }}:
			return [
				{% for var in type.storedVariables %}
				{% for enum in types.enums where enum.localName == var.typeName.name %}
				{% if enum.rawTypeName.name == "String" %}	
				{% if var.typeName.name == enum.localName %}	
				AutoEnumProperty(name: "{{ var.name }}", cases: [
					{% for case in enum.cases %}
						"{{ case.name }}",
					{% endfor %}
				], getCallback: {
					return (pix as! {{ type.name }}).{{ var.name }}.rawValue
				}, setCallback: { value in
					(pix as! {{ type.name }}).{{ var.name }} = {{ enum.name }}(rawValue: value) ?? .{{ enum.cases[0].name }}
				}),
				{% endif %}
				{% endif %}
				{% endfor %}
				{% endfor %}
			]
		{% endif %}
		{% endfor %}
		{% endfor %}
		}	
	}

}

{% endif %}
{% endfor %}
{% endfor %}
